package com.sunx.mysprmdbapp1.controllers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Arrays;
//import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
//import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
//import org.springframework.util.LinkedMultiValueMap;
//import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sunx.mysprmdbapp1.model.ImageRecords;
import com.sunx.mysprmdbapp1.repository.ImgRecordsRepository;
 


//import com.sunx.mysprmdbapp1.services.SeqIDGenService;
//@ComponentScan(basePackages = {"com.sunx.mysprmdbapp1.Services"})
//import org.springframework.boot.autoconfigure.domain.EntityScan;
//@EntityScan(basePackages = "com.sunx.mysprmdbapp1.services") 

@ComponentScan({ "com.sunx.mysprmdbapp1.*","com.sunx.mysprmdbapp1.controllers","org.springframework.data.mongodb.core.MongoOperations" })
 
@SpringBootApplication
@EnableMongoRepositories
@WebMvcTest(RestAPIController.class)
public class restAPICtrlTests {
  @MockBean
  private ImgRecordsRepository imgRecordsRepository;
  
  @Autowired
  private MockMvc mockMvc;

  @Autowired
  private ObjectMapper objectMapper;

  @Test
  void shouldCreateImgRecord() throws Exception {

	//ImageRecords(String id, String name,String title,String description, String category) 	  
	  ImageRecords i1 = new ImageRecords("1", "account 1", "image1 title","Description: Diabetes stage II retinal image", "Diabetes");

    mockMvc.perform(post("/api/imgrec").contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsString(i1)))
        .andExpect(status().isCreated())
        .andDo(print());
  }

  @Test
  void shouldReturnImgRecord() throws Exception {
    //long id = 1L;
    String id = "1";
    ImageRecords img =new ImageRecords(id, "account 1", "image1 title","Description: Diabetes stage II retinal image", "Diabetes");

    when(imgRecordsRepository.findById(id)).thenReturn(Optional.of(img));
    mockMvc.perform(get("/api/imgrec/{id}", id)).andExpect(status().isOk())
        .andExpect(jsonPath("$.id").value(id))
        .andExpect(jsonPath("$.title").value(img.getTitle()))
        .andExpect(jsonPath("$.description").value(img.getDescription()))
        .andExpect(jsonPath("$.name").value(img.getName()))
        .andDo(print());
  }

  @Test
  void shouldReturnNotFoundImgRecord() throws Exception {
    //long id = 1L;
    String id = "1";
    
    when(imgRecordsRepository.findById(id)).thenReturn(Optional.empty());
    mockMvc.perform(get("/api/imgrec/{id}", id))
         .andExpect(status().isNotFound())
         .andDo(print());
  }

  @Test
  void shouldReturnListOfImgRecords() throws Exception {
    List<ImageRecords> imgrecList = new ArrayList<>(
        Arrays.asList(
       		new ImageRecords("1", "account 1", "image1 title","Description1: Diabetes stage II retinal image", "Diabetes"),
       		new ImageRecords("2", "account 2", "image2 title","Description2: Diabetes stage I retinal image", "Diabetes"),
       		new ImageRecords("3", "account 3", "image3 title","Description3: Hypertension stage 1 retinal image", "Hypertension")
    		));

    when(imgRecordsRepository.findAll()).thenReturn(imgrecList);
    mockMvc.perform(get("/api/imgrec"))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.size()").value(imgrecList.size()))
        .andDo(print());
  }


  @Test
  void shouldUpdateImgRecord() throws Exception {
    //long id = 1L;
    String id="1";

    ImageRecords i0 = new ImageRecords(id, "account 1", "image1 title","Description: Diabetes stage II retinal image", "Diabetes");
    ImageRecords i1 = new ImageRecords(id, "account 1", "image1 title","Description1: Diabetes stage II retinal image1", "Diabetes");
   
    when(imgRecordsRepository.findById(id)).thenReturn(Optional.of(i0));
    when(imgRecordsRepository.save(any(ImageRecords.class))).thenReturn(i1);

    mockMvc.perform(put("/api/imgrec/{id}", id).contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsString(i1)))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.title").value(i1.getTitle()))
        .andExpect(jsonPath("$.description").value(i1.getDescription()))
        .andExpect(jsonPath("$.name").value(i1.getName()))
        .andDo(print());
  }
  
  @Test
  void shouldReturnNotFoundUpdateImgRecord() throws Exception {
    //long id = 1L;
    String id = "1";

    ImageRecords i1 = new ImageRecords(id, "account 112", "image112 title","Description11: Diabetes stage II retinal image112", "Diabetes");

    when(imgRecordsRepository.findById(id)).thenReturn(Optional.empty());
    when(imgRecordsRepository.save(any(ImageRecords.class))).thenReturn(i1);

    mockMvc.perform(put("/api/imgrec/{id}", id).contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsString(i1)))
        .andExpect(status().isNotFound())
        .andDo(print());
  }
  
  @Test
  void shouldDeleteImgRecord() throws Exception {
    //long id = 1L;
    String id="1";
    doNothing().when(imgRecordsRepository).deleteById(id);
    mockMvc.perform(delete("/api/imgrec/{id}", id))
         .andExpect(status().isNoContent())
         .andDo(print());
  }
  
  @Test
  void shouldDeleteAllImgRecords() throws Exception {
    doNothing().when(imgRecordsRepository).deleteAll();
    mockMvc.perform(delete("/api/imgrec"))
         .andExpect(status().isNoContent())
         .andDo(print());
  }

  /*  @Test
  void shouldReturnListOfImgRecordsWithFilter() throws Exception {
    List<Tutorial> tutorials = new ArrayList<>(
        Arrays.asList(new Tutorial(1, "Spring Boot @WebMvcTest", "Description 1", true),
            new Tutorial(3, "Spring Boot Web MVC", "Description 3", true)));

    String title = "Boot";
    MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
    paramsMap.add("title", title);

    when(tutorialRepository.findByTitleContaining(title)).thenReturn(tutorials);
    mockMvc.perform(get("/api/tutorials").params(paramsMap))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.size()").value(tutorials.size()))
        .andDo(print());
  } 
  
  @Test
  void shouldReturnNoContentWhenFilter() throws Exception {
    String title = "BezKoder";
    MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
    paramsMap.add("title", title);
    
    List<Tutorial> tutorials = Collections.emptyList();

    when(tutorialRepository.findByTitleContaining(title)).thenReturn(tutorials);
    mockMvc.perform(get("/api/tutorials").params(paramsMap))
        .andExpect(status().isNoContent())
        .andDo(print());
  } */
  
  
}
